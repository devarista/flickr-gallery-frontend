import type { NextPage, GetServerSideProps } from 'next'
import Head from 'next/head'
import axios from 'axios'
import { ImageData, Item } from '../types/interface'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import useDebounce from '../hooks/useDebounce'

const Home = (props: { images: ImageData }) => {
    const [imageData, setImageData] = useState(props.images)
    const [tags, setTags] = useState<string | null>(null)

    const debouncedSearch = useDebounce(tags, 500)

    useEffect(() => {
        const getImagesWithTags = async () => {
            const { data } = await axios.get(`${process.env.NEXT_PUBLIC_SERVER_URL}/image?tags=${debouncedSearch}`)
            return setImageData(data)
        }

        if (debouncedSearch) getImagesWithTags()
    }, [debouncedSearch])

    return (
        <div className=''>
            <Head>
                <title>Create Next App</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <main className='container mx-auto px-56 py-16 flex flex-col space-y-8'>
                <input
                    id='search'
                    name='search'
                    type='search'
                    className='w-full rounded '
                    placeholder='Search by Tag'
                    onChange={(e) => {
                        setTags(e.target.value)
                    }}
                />

                <section className='w-full grid grid-cols-3 gap-4'>
                    {imageData.items.map((item: Item, index: number) => (
                        <Image className='rounded drop-shadow' key={index} src={item.media.m} alt={item.title} layout='responsive' width={1} height={1} objectFit='cover' />
                    ))}
                </section>
            </main>
        </div>
    )
}

export default Home

export const getServerSideProps: GetServerSideProps = async () => {
    const { data } = await axios.get<ImageData>(`${process.env.NEXT_PUBLIC_SERVER_URL}/image`)
    return {
        props: {
            images: data,
        },
    }
}
